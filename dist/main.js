/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("\n\n// List factory\nconst List = (title = \"New project\") => {\n\n  const list = [];\n  // Retrieve current list title\n  const getTitle = () => title;\n  // Modifiy list title\n  const setTitle = (newTitle) => title = newTitle;\n\n  const addTask = (task) => list.push(task);\n  // Remove specified item from array (also returns the item; can be added to completed list)\n  const removeTask = (id) => {\n    // Find task; undefined = not found\n    const task = getTask(id);\n    // Get its index position [consolidate code later]\n    const index = list.indexOf(task);\n\n    list.splice(index, 1);\n  }\n\n  // Search list for specified task using its id property \n  const getTask = (id) => list.find(task => task.getId() === id);\n\n  // Retrieve the array without being able to access items\n  const getTasks = () => list;\n\n  // Clear array of all items while preventing memory leaks\n  const clearTasks = () => list.length = 0;\n\n  return {\n    getTitle,\n    setTitle,\n    addTask,\n    removeTask,\n    getTask,\n    getTasks,\n    clearTasks\n  }\n}\n\n\n\n\n\nconst backgroundImages = (() => {\n  const images = [\n    '/home/tristan/the_odin_project/todo-list/src/images/bridge.jpeg',\n    '/home/tristan/the_odin_project/todo-list/src/images/autum-tree.jpeg',\n    '/home/tristan/the_odin_project/todo-list/src/images/winter.jpg'\n  ]\n\n  let index = 0;\n\n  function buildImage() {\n    document.querySelector('#main:before').style.backgroundImage = 'url(' + images[1] + ')';\n  }\n\n  function changeImage() {\n    index++;\n    if (index >= images.length) index = 0;\n    document.querySelector('#main:before').style.backgroundImage = 'url(' + images[index] + ')';\n  }\n\n  return { buildImage, changeImage }\n})();\n\n\n// Determine current date\nconst timeModule = ((dayInput = undefined) => {\n\n\n  const newDay = new Date();\n\n  // Parameter should contain a date object\n  if (typeof (dayInput) === \"object\") {\n    newDay = dayInput;\n  }\n\n  const dd = String(newDay.getDate()).padStart(2, '0');\n  const mm = String(newDay.getMonth()).padStart(2, '0'); //January is 0!\n  const yyyy = newDay.getFullYear();\n\n  const months = [\n    \"Janurary\", \"Feburary\", \"March\", \"April\",\n    \"May\", \"June\", \"July\", \"August\",\n    \"September\", \"October\", \"November\", \"December\"\n  ]\n\n  const weekdays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n    \"Thursday\", \"Friday\", \"Saturday\"];\n\n\n  // Find current month as String\n  const _getCurrentMonth = function (day = newDay) {\n\n    const index = day.getMonth();\n\n    return months[index];\n  };\n\n\n  // Find current weekday as String\n  const _getCurrentWeekday = function (day = newDay) {\n\n    const index = day.getDay();\n\n    return weekdays[index];\n  };\n\n\n  // Format example: \"Saturday, November 07\"\n  const dateWithWeekday = function (date = newDay, dd = newDay.getDate()) {\n\n    return _getCurrentWeekday(date) + ', ' + _getCurrentMonth(date) + ' ' + dd;\n  }\n\n\n  // Format date: 2020/11/03\n  const defaultDate = () => yyyy + '/' + mm + '/' + dd;\n\n  const createNewDate = function (date) {\n    // Create new date object\n    const newDate = new Date();\n    let newDateArr = null;\n\n    // Create date array based on separators in parameter\n    if (date.includes(\"-\")) {\n      newDateArr = date.split(\"-\");\n    }\n    else {\n      newDateArr = date.split(\"/\");\n    }\n    // Year\n    const newYear = newDateArr[0];\n    newDate.setFullYear(Number(newYear));\n    // Month\n    const newMonth = newDateArr[1];\n    newDate.setMonth(Number(newMonth))\n    // Day\n    const newDay = newDateArr[2];\n    newDate.setDate(Number(newDay));\n\n    // Return newly created date object\n    return newDate;\n\n  }\n\n  return { createNewDate, defaultDate, dateWithWeekday }\n})();\n\n\n// ToDo factory\nconst Task = (\n  // Set default parameters\n  title, // mandatory\n  id,\n  dueDate = timeModule.defaultDate(), // optional, default's to current date\n  note = \"\",\n  priority = false,\n  completed = false,\n) => {\n\n  const _taskId = id;\n\n  const getTitle = () => title;\n\n  const setTitle = (newTitle) => title = newTitle;\n\n  const getId = () => _taskId;\n\n  const getDueDate = () => dueDate;\n\n  // Retrieve date and format it [EX: Tuesday, November 10];\n  const _formatDueDate = () => timeModule.dateWithWeekday(dueDate);\n\n  // Create new date object from string parameter\n  const setDueDate = (newDueDate) => dueDate = timeModule.createNewDate(newDueDate);\n\n  // Set initial date\n  setDueDate(dueDate);\n\n  const setNote = (newNote) => note = newNote;\n\n  const getNote = () => note;\n\n  const setPriority = (level) => priority = level;\n\n  const getPriority = () => priority;\n\n  const getCompleted = () => completed;\n\n  const setCompleted = (value) => completed = value;\n\n  const info = () => `${getTitle()} due on: ${_formatDueDate()} \\nNotes: ${getNote()}`;\n\n  return {\n    getTitle,\n    setTitle,\n    getId,\n    getDueDate,\n    setDueDate,\n    info,\n    setNote,\n    getNote,\n    setPriority,\n    getPriority,\n    getCompleted,\n    setCompleted\n  }\n}\n\n\nconst dailyTasks = (() => {\n\n  const daily = List(\"Daily Tasks\");\n  const completed = List(\"Completed\");\n  const currentDate = timeModule.dateWithWeekday();\n\n  // Will act as id for each task object\n  let count = 0;\n\n  // Cache DOM\n  const listModule = document.querySelector('div.list-container');\n  const defaultList = listModule.querySelector('ul.list');\n  const completedList = listModule.querySelector('ul.list-completed')\n  const listDate = listModule.querySelector('#list-date');\n\n  // Bind\n\n  // Set date to DOM\n  listDate.textContent = currentDate;\n\n  function newTask(\n    title,\n    dueDate = timeModule.defaultDate(),\n    note = \"\",\n    priority = false, \n    completed = false ) {\n\n    // GET VALUES FROM DOM\n\n    // Create new task from fields and add it to daily list\n    daily.addTask(Task(title, count, dueDate, note, priority, completed));\n\n    count++;\n\n    _render();\n  }\n\n  function toggleTask(id) {\n\n    let task = null;\n\n    if (typeof (daily.getTask(id)) !== \"undefined\") {\n      task = daily.getTask(id);\n    }\n    else {\n      task = completed.getTask(id);\n    }\n\n    // If completed = true add task to completed and remove from default\n    // Updating completed will count as an event that is apart of the \"subscribers\"\n    // Any task in completed list will receive new CSS styling\n\n    if (task.getCompleted() == false) {\n      // If false; toggle to true\n      task.setCompleted(true);\n\n      daily.removeTask(id);\n\n      completed.addTask(task);\n    }\n    else if (task.getCompleted() == true) {\n      // If true; toggle to false\n      task.setCompleted(false);\n      completed.removeTask(id);\n\n      daily.addTask(task);\n    }\n    else {\n      console.log(\"Whoops -- you did something wrong...\")\n    }\n\n    // Render changes \n    _render();\n  }\n\n  function priorityToggle(id) {\n    let task = null;\n\n    if (typeof (daily.getTask(id)) !== \"undefined\") {\n      task = daily.getTask(id);\n    }\n    else {\n      task = completed.getTask(id);\n    }\n\n    if (task.getPriority() == false) {\n      // If false; toggle to true\n      task.setPriority(true);\n    }\n    else if (task.getPriority() == true) {\n      // If true; toggle to false\n      task.setPriority(false);\n    }\n\n    _render();\n  }\n\n\n  function _render() {\n    // Return list of tasks and display each task's info\n    console.log(\"\\nDAILY LIST:\")\n    // create function to add\n    daily.getTasks().forEach(task => {\n      console.log(task.info());\n      \n      if (!defaultList.innerHTML.includes(task.getId())) {\n        // Check task's priority; true = checked, false = unchecked\n        const isChecked = (task.getPriority() == true) ? \"checked\" : \"unchecked\";\n\n        defaultList.innerHTML += \n        `<li data-id='${task.getId()}'>\n            <span class=\"task-checkbox\">\n                <label class=\"container\">\n                  <input type=\"checkbox\">\n                  <span class=\"checkmark\"></span>\n                  </label>\n                </span>${task.getTitle()}<i class=\"fa fa-star priority ${isChecked}\" aria-hidden=\"true\"></i></li>`\n      }\n    });\n\n    if (completed.getTasks().length > 0) {\n      console.log(\"\\nCOMPLETED:\");\n      completed.getTasks().forEach(task => {\n        console.log(task.info());\n        // Add to DOM\n        if (!completedList.innerHTML.includes(task.getId())) {\n          // Check task's priority; true = checked, false = unchecked\n          const isChecked = (task.getPriority() == true) ? \"checked\" : \"unchecked\";\n\n          completedList.innerHTML += \n          `<li data-id='${task.getId()}'>\n              <span class=\"task-checkbox\">\n                  <label class=\"container\">\n                    <input type=\"checkbox\" checked>\n                    <span class=\"checkmark\"></span>\n                    </label>\n                  </span>${task.getTitle()}<i class=\"fa fa-star priority ${isChecked}\" aria-hidden=\"true\"></i></li>`\n        }\n      });\n    }\n  }\n\n\n  return { newTask, toggleTask, priorityToggle }\n})();\n\n\n// Add task items as demos\ndailyTasks.newTask(\"Study\", undefined, \"With Landyn\", true, false);\ndailyTasks.newTask(\"Workout\", undefined, \"Leg day with Kiley\", true, false);\ndailyTasks.newTask(\"Flex on em\", undefined, undefined, false, false);\ndailyTasks.newTask(\"Call Mom\", undefined, undefined, true, false);\ndailyTasks.newTask(\"Work at 9am\", undefined, \"Made $40\", true, false);\ndailyTasks.newTask(\"Text Suglo\", undefined, undefined, false, false);\ndailyTasks.newTask(\"Hit Superstore\", undefined, \"Need milk, bread, beef\", true, false);\ndailyTasks.newTask(\"Shopping\", undefined, \"Finish christmas shopping\", false, false);\n\n// TASKS NOT BEING DELETED FROM REGULAR LIST (DOM ISSUE)\ndailyTasks.toggleTask(3);\ndailyTasks.toggleTask(4);\ndailyTasks.toggleTask(5);\n\n\n// Simulate a user spam toggling a task\n\n\n\n//# sourceURL=webpack://todo-list/./src/index.js?");
/******/ })()
;